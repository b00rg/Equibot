import alpaca_trade_api as tradeapi
import numpy as np
import time

# Define your API credentials
api_key = 'YOUR_API_KEY'
api_secret = 'YOUR_API_SECRET'
base_url = 'https://paper-api.alpaca.markets'

# Define the stock you want to trade and the amount of shares to buy/sell
stock_symbol = 'AAPL'
shares_to_trade = 10

# Define stop-loss and profit target percentages
stop_loss_percentage = 1
profit_target_percentage = 2

# Create an instance of the Alpaca API
api = tradeapi.REST(api_key, api_secret, base_url, api_version='v2')

# Define trading strategy and position sizing
def get_trading_signals(stock_symbol):
    # Get stock prices and calculate the 20-day moving average
    prices = api.get_barset(stock_symbol, 'day', limit=20).df[stock_symbol]['close'].values
    ma_20 = np.mean(prices)
    last_price = api.get_last_trade(stock_symbol).price
    
    # Determine whether to buy or sell based on the current price and moving average
    if last_price < ma_20:
        position = 'buy'
        stop_price = last_price * (1 - stop_loss_percentage / 100)
        limit_price = last_price * (1 + profit_target_percentage / 100)
    else:
        position = 'sell'
        stop_price = last_price * (1 + stop_loss_percentage / 100)
        limit_price = last_price * (1 - profit_target_percentage / 100)
    
    # Determine the appropriate position size based on the account balance and risk tolerance
    account_balance = api.get_account().cash
    risk_percentage = 2
    position_size = account_balance * (risk_percentage / 100) / (last_price - stop_price)
    
    return position, position_size, stop_price, limit_price

# Define a function to calculate the maximum position size based on account balance and risk tolerance
def calculate_max_position_size(stock_symbol, risk_percentage):
    account_balance = api.get_account().cash
    last_price = api.get_last_trade(stock_symbol).price
    stop_loss_percentage = 1
    stop_price = last_price * (1 - stop_loss_percentage / 100)
    position_size = account_balance * (risk_percentage / 100) / (last_price - stop_price)
    return int(position_size)

# Define a function to monitor the market and adjust the risk percentage
def monitor_market(stock_symbol, max_position_size):
    prices = api.get_barset(stock_symbol, 'day', limit=20).df[stock_symbol]['close'].values
    ma_20 = np.mean(prices)
    last_price = api.get_last_trade(stock_symbol).price
    if last_price < ma_20:
        risk_percentage = 2
    else:
        risk_percentage = 1
    new_position_size = calculate_max_position_size(stock_symbol, risk_percentage)
    if new_position_size > max_position_size:
        return max_position_size
    else:
        return new_position_size

# Run the trading bot indefinitely
max_position_size = calculate_max_position_size(stock_symbol, 2)
while True:
    # Monitor the market and adjust the risk percentage
    max_position_size = monitor_market(stock_symbol, max_position_size)
    
    # Get trading signals and position size
    position, position_size, stop_price, limit_price = get_trading_signals(stock_symbol)
    
    # Check if the current position matches the trading signal, and adjust if necessary
    current_position = api.get_position(stock_symbol)
    if current_position is None:
        current_position_size = 0
    else:
        current_position_size = int(current_position.qty)
    
    if position == 'buy' and current_position_size < position_size:
        buy_quantity = position_size - current_position_size
        api.submit_order(stock_symbol, buy_quantity, 'buy', 'market', 'gtc')
    elif position == 'sell' and current_position_size > -position_size:
        sell_quantity = current_position_size + position_size
        api.submit_order(stock_symbol, sell_quantity, 'sell', 'market', 'gtc')
    
    # Set stop-loss and profit target orders
    open_orders = api.list_orders(status='open')
    for order in open_orders:
        if order.symbol == stock_symbol and order.type == 'limit':
            api.cancel_order(order.id)
    if current_position_size > 0:
        api.submit_order(stock_symbol, current_position_size, 'sell', 'limit', 'gtc', limit_price=limit_price, stop_loss=stop_price)
    elif current_position_size < 0:
        api.submit_order(stock_symbol, -current_position_size, 'buy', 'limit', 'gtc', limit_price=limit_price, stop_loss=stop_price)
    
    # Wait for a minute before checking again
    time.sleep(60)
